from os.path import join, basename, dirname, relpath
from os import symlink
from snakemake.logging import logger
import Apricot_version

logger.info("Apricot Version:" + Apricot_version.__version__)

if not config:
    raise ValueError('Please specify --configfile when launching snakemake')

INPUT_DIR = config['dirs']['input']
OUTPUT_DIR = config['dirs']['output']
REFERENCE_DIR = config['dirs']['reference']

def _get_paired_end():
    _read_counts = list(set([len(reads) for sample, reads in config['samples'].items()]))
    if len(_read_counts) != 1:
        raise ValueError('Check config file: samples must be consistently single-end or paired-end')
    _paired_end = _read_counts[0] == 2
    reads = ['R1', 'R2'] if _paired_end else ['R1']
    return _paired_end, reads

PAIRED_END, READS = _get_paired_end()
#print('paired = {}'.format(PAIRED_END))


ALL = []

include: 'rules/normalize_read_names.smk'
include: 'rules/umi_tools_extract.smk'
include: 'rules/fastqc_seq.smk'
include: 'rules/rsem_star_genome_generate.smk'
include: 'rules/rsem_star_align.smk'
include: 'rules/rsem_star_align_index.smk'
include: 'rules/rsem_star_align_flagstat.smk'
include: 'rules/samtools_exclude_non_primary.smk'
include: 'rules/umi_tools_dedup.smk'
include: 'rules/umi_tools_dedup_flagstat.smk'
include: 'rules/fastqc_align.smk'
include: 'rules/rsem_calculate_expression_using_dedup.smk'
include: 'rules/combine_counts_after_dedup.smk'
include: 'rules/combine_counts.smk'
include: 'rules/convert_dedup_for_rsem.smk'
include: 'rules/multiqc.smk'
include: 'rules/samtools_sort_index_after_dedup.smk'
include: 'rules/deeptools_bigwig.smk'


rule all:
    input:
        *ALL
    output:
        [join(OUTPUT_DIR, 'deliverables', basename(file)) for file in ALL]
    run:
        for in_file, out_file in zip(input, output):
            symlink(relpath(in_file, dirname(out_file)), out_file)


def email(subject_prefix):
    msg = 'config file:\n{}\nlog file:\n{}'.format(str(list(workflow.configfiles)), logger.get_logfile())
    email_config = config.get('email')
    if not email_config:
        print(subject_prefix, msg)
    else:
        command = "echo '{msg}' | mutt -s '{subject_prefix}{subject}' {to}".format(
                to=email_config['to'],
                subject_prefix=subject_prefix,
                subject=email_config['subject'],
                msg=msg,
                )
        shell(command)


onstart:
    email('Apricot started: ')

onsuccess:
    email('Apricot completed ok: ')

onerror:
    email('Apricot ERROR: ')
